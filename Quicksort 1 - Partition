https://www.hackerrank.com/challenges/quicksort1/problem?isFullScreen=true



import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static List<Integer> quickSort(List<Integer> arr) {
    
        int value= arr.get(0);
        List<Integer> listLeftIntegers= new ArrayList<>();
        List<Integer> listRightIntegers= new ArrayList<>();
        List<Integer> listFinalIntegers= new ArrayList<>();
        
        for (int i = 0; i < arr.size(); i++) {
            if(value>arr.get(i)){
                listRightIntegers.add(arr.get(i));
            }
            else{
                listLeftIntegers.add(arr.get(i));
            }
        }
        listFinalIntegers.addAll(listRightIntegers);
        listFinalIntegers.addAll(listLeftIntegers);
        return listFinalIntegers;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.quickSort(arr);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
