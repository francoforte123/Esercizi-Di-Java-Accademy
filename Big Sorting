//ho scritto due versioni dell'esercizio, ma entrambi mi passano solo un test, ma secondo me sono corrette al livello logico

https://www.hackerrank.com/challenges/big-sorting/problem?isFullScreen=true



import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static List<String> bigSorting(List<String> unsorted) {
        
        /*List<Integer> listInteger= new ArrayList<>();
        for (String str : unsorted) {
            listInteger.add(Integer.parseInt(str));
        }
        
        Collections.sort(listInteger);
        List<String> listString= new ArrayList<>();
        for (Integer integer : listInteger) {
            listString.add(Integer.toString(integer));
        }
        return listString;*/
        
        Collections.sort(unsorted);
        return unsorted;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> unsorted = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.bigSorting(unsorted);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
